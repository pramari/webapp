# Generated by Django 5.2 on 2025-04-28 12:15

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
import webapp.activitypub.models.action
import webapp.activitypub.models.actor
import webapp.activitypub.validators
from django.conf import settings
from django.db import migrations, models


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# webapp.migrations.0004_profile
# webapp.migrations.0026_actor

def move_profile(apps, schema_editor):
    User = apps.get_model("webapp", "User")
    Profile = apps.get_model("webapp", "Profile")
    for user in User.objects.all():
        profile = Profile()
        profile.user = user
        profile.dob = user.dob
        profile.public = user.public
        profile.consent = user.consent
        profile.save()

def create_actor(apps, schema_editor):
    Profile = apps.get_model("webapp", "Profile")
    Actor = apps.get_model("webapp", "Actor")

    for profile in Profile.objects.all():
        Actor.objects.create(id=profile.ap_id, profile=profile)


class Migration(migrations.Migration):

    replaces = [('webapp', '0001_initial'), ('webapp', '0002_auto_20210109_1528'), ('webapp', '0003_alter_user_id'), ('webapp', '0004_profile'), ('webapp', '0005_remove_user_dob_profile_gravatar_profile_img_and_more'), ('webapp', '0006_profile_mastodon_alter_profile_img'), ('webapp', '0007_profile_slug'), ('webapp', '0008_profile_bio_profile_icon'), ('webapp', '0009_activity_profile_public_key_pem_alter_profile_img'), ('webapp', '0010_alter_activity_actor_alter_activity_verb'), ('webapp', '0011_attachment_profile_private_key_pem_object'), ('webapp', '0012_alter_activity_actor'), ('webapp', '0013_alter_activity_object'), ('webapp', '0014_profile_ap_id'), ('webapp', '0015_alter_profile_user'), ('webapp', '0016_delete_activity_remove_object_attachment_and_more'), ('webapp', '0017_action'), ('webapp', '0018_note'), ('webapp', '0019_alter_action_options_and_more'), ('webapp', '0020_alter_note_options_note_sensitive'), ('webapp', '0021_alter_profile_ap_id_alter_profile_private_key_pem'), ('webapp', '0022_profile_key_id'), ('webapp', '0023_alter_profile_key_id'), ('webapp', '0024_remove_profile_key_id'), ('webapp', '0025_alter_profile_ap_id'), ('webapp', '0026_actor'), ('webapp', '0027_alter_actor_profile'), ('webapp', '0028_actor_preferredusername'), ('webapp', '0029_actor_follows'), ('webapp', '0030_remove_action_verb_action_activity_type'), ('webapp', '0031_alter_actor_type'), ('webapp', '0032_remove_actor_preferredusername_remove_actor_slug'), ('webapp', '0033_alter_actor_id'), ('webapp', '0034_alter_actor_id'), ('webapp', '0035_remove_actor_follows_actor_following'), ('webapp', '0036_note_attributedto_note_contentmap_note_remoteid'), ('webapp', '0037_like'), ('webapp', '0038_alter_like_id'), ('webapp', '0039_rename_following_actor_follows'), ('webapp', '0040_alter_actor_follows'), ('webapp', '0041_alter_actor_id'), ('webapp', '0042_fllwng_actor_flw'), ('webapp', '0043_remove_actor_follows'), ('webapp', '0044_remove_actor_flw_follow_actor_follows_delete_fllwng'), ('webapp', '0045_remove_profile_ap_id_remove_profile_follows'), ('webapp', '0046_alter_actor_profile'), ('webapp', '0047_alter_profile_user'), ('webapp', '0048_remove_user_consent_remove_user_public'), ('webapp', '0049_profile_publish_to_linkedin'), ('webapp', '0050_alter_profile_img'), ('webapp', '0051_alter_actor_unique_together_remove_actor_follows_and_more')]

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('public', models.BooleanField(default=False)),
                ('consent', models.BooleanField(default=False)),
                ('dob', models.DateField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public', models.BooleanField(default=False)),
                ('consent', models.BooleanField(default=False)),
                ('dob', models.DateField(blank=True, null=True)),
                ('follows', models.ManyToManyField(blank=True, related_name='followed_by', to='webapp.profile')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.RunPython(
            code=move_profile,
        ),
        migrations.RemoveField(
            model_name='user',
            name='dob',
        ),
        migrations.AddField(
            model_name='profile',
            name='gravatar',
            field=models.BooleanField(default=True, help_text='Use Gravatar profile image.'),
        ),
        migrations.AlterField(
            model_name='profile',
            name='id',
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='user',
            name='id',
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AddField(
            model_name='profile',
            name='mastodon',
            field=models.URLField(blank=True),
        ),
        migrations.AddField(
            model_name='profile',
            name='slug',
            field=models.SlugField(help_text='Slug', null=True),
        ),
        migrations.AddField(
            model_name='profile',
            name='bio',
            field=models.TextField(blank=True, help_text='Short Bio'),
        ),
        migrations.AddField(
            model_name='profile',
            name='icon',
            field=models.CharField(choices=[('0s', '0-square')], default='0s', max_length=2),
        ),
        migrations.AddField(
            model_name='profile',
            name='public_key_pem',
            field=models.TextField(blank=True, help_text='Public Key'),
        ),
        migrations.AddField(
            model_name='profile',
            name='img',
            field=models.ImageField(default='https://storage.cloud.google.com/media.pramari.de/user/default.png', upload_to='mediafiles/user/'),
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('media_type', models.CharField(max_length=255)),
                ('url', models.URLField()),
                ('name', models.CharField(blank=True, max_length=255)),
            ],
        ),
        migrations.AddField(
            model_name='profile',
            name='private_key_pem',
            field=models.TextField(blank=True, help_text='Private Key'),
        ),
        migrations.CreateModel(
            name='Object',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_type', models.CharField(choices=[('Article', 'Article'), ('Note', 'Note'), ('Image', 'Image'), ('Video', 'Video'), ('Audio', 'Audio')], max_length=255)),
                ('content', models.TextField(blank=True)),
                ('url', models.URLField(blank=True)),
                ('published', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('attachment', models.ManyToManyField(blank=True, to='webapp.attachment')),
                ('attributed_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('in_reply_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='webapp.object')),
            ],
        ),
        migrations.AddField(
            model_name='profile',
            name='ap_id',
            field=models.CharField(blank=True, help_text='ActivityPub ID', max_length=255, unique=True),
        ),
        migrations.AlterField(
            model_name='profile',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterField(
            model_name='profile',
            name='consent',
            field=models.BooleanField(default=False, help_text='Consent to store and use data.'),
        ),
        migrations.AlterField(
            model_name='profile',
            name='dob',
            field=models.DateField(blank=True, help_text='Date of Birth (DOB)', null=True),
        ),
        migrations.AlterField(
            model_name='profile',
            name='public',
            field=models.BooleanField(default=False, help_text='Make Profile Profile public?'),
        ),
        migrations.DeleteModel(
            name='Attachment',
        ),
        migrations.DeleteModel(
            name='Object',
        ),
        migrations.CreateModel(
            name='Action',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('public', models.BooleanField(db_index=True, default=True)),
                ('actor_object_id', models.CharField(db_index=True, max_length=255)),
                ('verb', models.CharField(db_index=True, max_length=255)),
                ('actor_content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='actor', to='contenttypes.contenttype')),
                ('action_object_content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='action_object', to='contenttypes.contenttype')),
                ('action_object_object_id', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('target_content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='target', to='contenttypes.contenttype')),
                ('target_object_id', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
            ],
            options={
                'ordering': ('-timestamp',),
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('published', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('updated', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('public', models.BooleanField(db_index=True, default=True)),
                ('sensitive', models.BooleanField(db_index=True, default=False)),
            ],
            options={
                'verbose_name': 'Note (Activity Streams 2.0)',
                'verbose_name_plural': 'Notes (Activity Streams 2.0)',
            },
        ),
        migrations.CreateModel(
            name='Actor',
            fields=[
                ('id', models.CharField(max_length=255, primary_key=True, serialize=False, unique=True)),
                ('type', models.CharField(default='Person', max_length=255)),
                ('slug', models.SlugField(help_text='Slug', null=True)),
                ('profile', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='webapp.profile')),
            ],
            options={
                'verbose_name': 'Actor (Activity Streams 2.0)',
                'verbose_name_plural': 'Actors (Activity Streams 2.0)',
                'unique_together': {('id', 'type', 'profile')},
            },
        ),
        migrations.RunPython(
            code=create_actor
        ),
        migrations.AlterField(
            model_name='actor',
            name='profile',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='webapp.profile'),
        ),
        migrations.AddField(
            model_name='action',
            name='activity_type',
            field=models.CharField(choices=webapp.activitypub.models.action.get_activity_types, db_index=True, default='add', max_length=255),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='actor',
            name='type',
            field=models.CharField(choices=webapp.activitypub.models.actor.get_actor_types, default='Person', max_length=255),
        ),
        migrations.RemoveField(
            model_name='actor',
            name='slug',
        ),
        migrations.AlterField(
            model_name='actor',
            name='id',
            field=models.CharField(max_length=255, primary_key=True, serialize=False, unique=True, validators=[webapp.activitypub.validators.validate_iri]),
        ),
        migrations.AddField(
            model_name='note',
            name='contentMap',
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='note',
            name='remoteID',
            field=models.URLField(blank=True, db_index=True, null=True),
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('object', models.URLField(validators=[webapp.activitypub.validators.validate_iri])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Follow',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('accepted', models.URLField(blank=True, null=True, validators=[webapp.activitypub.validators.validate_iri])),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.AddField(
            model_name='actor',
            name='follows',
            field=models.ManyToManyField(blank=True, related_name='followed_by', through='webapp.Follow', to='webapp.actor'),
        ),
        migrations.RemoveField(
            model_name='profile',
            name='ap_id',
        ),
        migrations.RemoveField(
            model_name='profile',
            name='follows',
        ),
        migrations.AlterField(
            model_name='actor',
            name='profile',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='webapp.profile'),
        ),
        migrations.AlterField(
            model_name='profile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.RemoveField(
            model_name='user',
            name='consent',
        ),
        migrations.RemoveField(
            model_name='user',
            name='public',
        ),
        migrations.AddField(
            model_name='profile',
            name='publish_to_linkedin',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='profile',
            name='img',
            field=models.ImageField(default='/user/default.png', upload_to='mediafiles/user/'),
        ),
        migrations.AlterUniqueTogether(
            name='actor',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='actor',
            name='follows',
        ),
        migrations.RemoveField(
            model_name='actor',
            name='profile',
        ),
        migrations.DeleteModel(
            name='Action',
        ),
        migrations.DeleteModel(
            name='Follow',
        ),
        migrations.DeleteModel(
            name='Note',
        ),
        migrations.DeleteModel(
            name='Actor',
        ),
        migrations.DeleteModel(
            name='Like',
        ),
    ]
